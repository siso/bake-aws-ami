---
# Based heavily on the Ansible documentation on EC2:
# http://docs.ansible.com/ec2_module.html
  - name: Provision EC2 instance
    hosts: local
    connection: local
    gather_facts: False
    tags: provisioning
    vars:
      instance_type: t2.small
      security_group: siso-SG
      image: ami-69631053
      region: ap-southeast-2
      keypair: siso
      keypair_file: anz-support_siso
    tasks:
      - name: Launch new Instance
        local_action: ec2 instance_tags="name=siso-ansible,provisioner=ansible,ami_role=glassfish" group={{ security_group }} instance_type={{ instance_type}} image={{ image }} wait=true region={{ region }} keypair={{ keypair }}
        register: ec2
      # - name: Add instance to local host group
      #   local_action: lineinfile dest=environments/development/inventory regexp="{{ item.public_dns_name }}" insertafter="[launched]" line="{{ item.public_dns_name }} ansible_ssh_user=ubuntu ansible_ssh_private_key_file=~/.ssh/{{ keypair_file }}.pem"
      #   with_items: ec2.instances
      - name: Add new instance to in-memory host group
        add_host: hostname={{ item.public_dns_name }} groupname=launched
        with_items: ec2.instances
      - debug: var=ec2
      - name: Wait for SSH to come up
        local_action: wait_for host={{ item.public_dns_name }} port=22 delay=60 timeout=320 state=started
        with_items: ec2.instances
      # - name: mock wait_for (wait_for does not work through bastion)
      #   command: /bin/sleep 120

  - name: With the newly provisioned EC2 node configure that thing
    hosts: launched       # This uses the hosts that we put into the in-memory hosts repository with the add_host module.
    sudo: yes             # On EC2 nodes, this is automatically passwordless.
    remote_user: ubuntu   # This is the username for all ubuntu images, rather than root, or something weird.
    gather_facts: True    # We need to re-enable this, as we turned it off earlier.
    # vars:
    #   java_user: 'java'
    # roles:
    #   - common
    tasks:
      - name: install apache
        apt: name=apache2 state=latest update_cache=yes

  - name: Create AMI
    hosts: local
    connection: local
    gather_facts: false
    vars:
      region: ap-southeast-2
    tasks:
      - name: Current build number
        local_action: shell date +%Y%m%d-%H%M%S
        register: current_build_timestamp
        run_once: true
      - name: Create AMI
        ec2_ami:
          region: "{{ region }}"
          instance_id: "{{ item.id }}"
          wait: yes
          name: "siso-ansible-webserver-{{ current_build_timestamp.stdout }}"
        with_items: ec2.instances
        # ignore errors so ec2 is deleted anyway
        ignore_errors: true
      - name: Terminate instances that were previously launched
        ec2:
          region: "{{ region }}"
          state: 'absent'
          instance_ids: '{{ item.id }}'
        with_items: ec2.instances
